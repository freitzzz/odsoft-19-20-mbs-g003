// (ATB)

plugins {
    id "fr.putnami.gwt" version "0.4.0"
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

//Java version compatibility to use when compiling Java source.
sourceCompatibility = 1.8
//Java version to generate classes for.
targetCompatibility = 1.8
//Script Version
version = '1.0'
 
repositories { 
	mavenCentral() 
}

war.doLast{
	javadoc.execute()
}

dependencies {
 	testCompile 'junit:junit:4.12'
 	testCompile 'org.easymock:easymock:2.5.2'
	testCompile 'com.google.gwt:gwt-dev:2.8.2'

}

javadoc {

	// The definition of this setting is obligatory as gradle javadoc task
	// tries to generate dependencies javadoc
	// see https://stackoverflow.com/a/52797107
	options.addStringOption("sourcepath", "")

	source = sourceSets.main.allJava
    options.overview = "src/main/javadoc/overview.html"
}

// Once javadoc task is executed, the first thing that is required to be done is the render
// of the PlantUML files as images
javadoc.doFirst{
    // First we need to execute plant uml render task
    renderPlantUml.render()
}

// After the javadoc generation, it is required to move the content generated by renderPlantUml task
// Into 'build/docs/javadoc' folder, enabling the display of the diagrams in the javadocs
javadoc.doLast{
    ant.move(file: "build/puml", toFile: "build/docs/javadoc/")
}

task renderPlantUml(type: RenderPlantUmlTask)

// If we woant to use the default ant build inside gradle
// ant.importBuild "build.xml"

putnami{

	module 'pt.isep.cms.Showcase'
	//module 'com.google.gwt.sample.contacts.Contacts'
	
	/** add gwt nature on eclipse project. require apply plugin: 'eclipse' to work. default : false*/
	googlePluginEclipse = true
	
	gwtVersion='2.8.2'
	
	compile {
		sourceLevel = '1.8'
		compileReport = true
		optimize = 5
	}
	
	jetty {
        /** enable debugging. */
        debugJava = true
        /** debug port to listen. */
        debugPort = 8000
        /** wait for debugger attachment. */
        debugSuspend = false
    }
}

// Jacoco
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
    }
}

// This task generates the coverage report for the integration tests.
// Notice that it only includes data about the server code sice Jaccoco is not able to get data about cliente code that is transpiled to javascript
task jacocoIntegrationReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    executionData = files("${buildDir}/jacoco/integrationTest.exec")
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
		html.destination file("${buildDir}/jacocoIntegrationHtml")
    }
}

// Integration Tests
task integrationTest(type: Test) {
	filter { 
		//all GWT unit tests, by naming convention
      	includeTestsMatching "*GWTTest*"
	}    
    jacoco { 
    		append = true
    		enabled = true
    		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")
    		
    		excludes = ["com/steadystate/**"] 
    }
    // These Properties are required to run gwt integration tests
    systemProperties['gwt.args'] = "-devMode -logLevel SPAM -war www-test"
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Unit Tests
test { 
	filter { 
		//all JRE unit tests, by naming convention
      	includeTestsMatching "*JRETest*"
		includeTestsMatching "*UnitTests*"
	}
    jacoco { 
    		append = true
    		enabled = true
  		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")
    }	
}
